// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message_2eproto;
namespace proto_info {
class RequestMsg;
struct RequestMsgDefaultTypeInternal;
extern RequestMsgDefaultTypeInternal _RequestMsg_default_instance_;
class RespondMsg;
struct RespondMsgDefaultTypeInternal;
extern RespondMsgDefaultTypeInternal _RespondMsg_default_instance_;
}  // namespace proto_info
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_info::RequestMsg* Arena::CreateMaybeMessage<::proto_info::RequestMsg>(Arena*);
template<> ::proto_info::RespondMsg* Arena::CreateMaybeMessage<::proto_info::RespondMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_info {

enum CmdType : int {
  kSeckeyAgree = 0,
  kSeckeyVerify = 1,
  kSeckeyLogout = 2,
  CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CmdType_IsValid(int value);
constexpr CmdType CmdType_MIN = kSeckeyAgree;
constexpr CmdType CmdType_MAX = kSeckeyLogout;
constexpr int CmdType_ARRAYSIZE = CmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdType_descriptor();
template<typename T>
inline const std::string& CmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmdType_descriptor(), enum_t_value);
}
inline bool CmdType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmdType>(
    CmdType_descriptor(), name, value);
}
// ===================================================================

class RequestMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_info.RequestMsg) */ {
 public:
  inline RequestMsg() : RequestMsg(nullptr) {}
  ~RequestMsg() override;
  explicit PROTOBUF_CONSTEXPR RequestMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestMsg(const RequestMsg& from);
  RequestMsg(RequestMsg&& from) noexcept
    : RequestMsg() {
    *this = ::std::move(from);
  }

  inline RequestMsg& operator=(const RequestMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestMsg& operator=(RequestMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestMsg* internal_default_instance() {
    return reinterpret_cast<const RequestMsg*>(
               &_RequestMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestMsg& a, RequestMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestMsg& from) {
    RequestMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_info.RequestMsg";
  }
  protected:
  explicit RequestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 2,
    kServerIdFieldNumber = 3,
    kSignFieldNumber = 4,
    kDataFieldNumber = 5,
    kCmdTypeFieldNumber = 1,
  };
  // bytes client_id = 2;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // bytes server_id = 3;
  void clear_server_id();
  const std::string& server_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_id();
  PROTOBUF_NODISCARD std::string* release_server_id();
  void set_allocated_server_id(std::string* server_id);
  private:
  const std::string& _internal_server_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_id(const std::string& value);
  std::string* _internal_mutable_server_id();
  public:

  // bytes sign = 4;
  void clear_sign();
  const std::string& sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign();
  PROTOBUF_NODISCARD std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .proto_info.CmdType cmd_type = 1;
  void clear_cmd_type();
  ::proto_info::CmdType cmd_type() const;
  void set_cmd_type(::proto_info::CmdType value);
  private:
  ::proto_info::CmdType _internal_cmd_type() const;
  void _internal_set_cmd_type(::proto_info::CmdType value);
  public:

  // @@protoc_insertion_point(class_scope:proto_info.RequestMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int cmd_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class RespondMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_info.RespondMsg) */ {
 public:
  inline RespondMsg() : RespondMsg(nullptr) {}
  ~RespondMsg() override;
  explicit PROTOBUF_CONSTEXPR RespondMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RespondMsg(const RespondMsg& from);
  RespondMsg(RespondMsg&& from) noexcept
    : RespondMsg() {
    *this = ::std::move(from);
  }

  inline RespondMsg& operator=(const RespondMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespondMsg& operator=(RespondMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RespondMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const RespondMsg* internal_default_instance() {
    return reinterpret_cast<const RespondMsg*>(
               &_RespondMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RespondMsg& a, RespondMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(RespondMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespondMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RespondMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RespondMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RespondMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RespondMsg& from) {
    RespondMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespondMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_info.RespondMsg";
  }
  protected:
  explicit RespondMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 3,
    kServerIdFieldNumber = 4,
    kDataFieldNumber = 5,
    kStatusFieldNumber = 1,
    kSeckeyIdFieldNumber = 2,
  };
  // bytes client_id = 3;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // bytes server_id = 4;
  void clear_server_id();
  const std::string& server_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_id();
  PROTOBUF_NODISCARD std::string* release_server_id();
  void set_allocated_server_id(std::string* server_id);
  private:
  const std::string& _internal_server_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_id(const std::string& value);
  std::string* _internal_mutable_server_id();
  public:

  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // int32 seckey_id = 2;
  void clear_seckey_id();
  int32_t seckey_id() const;
  void set_seckey_id(int32_t value);
  private:
  int32_t _internal_seckey_id() const;
  void _internal_set_seckey_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_info.RespondMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    bool status_;
    int32_t seckey_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestMsg

// .proto_info.CmdType cmd_type = 1;
inline void RequestMsg::clear_cmd_type() {
  _impl_.cmd_type_ = 0;
}
inline ::proto_info::CmdType RequestMsg::_internal_cmd_type() const {
  return static_cast< ::proto_info::CmdType >(_impl_.cmd_type_);
}
inline ::proto_info::CmdType RequestMsg::cmd_type() const {
  // @@protoc_insertion_point(field_get:proto_info.RequestMsg.cmd_type)
  return _internal_cmd_type();
}
inline void RequestMsg::_internal_set_cmd_type(::proto_info::CmdType value) {
  
  _impl_.cmd_type_ = value;
}
inline void RequestMsg::set_cmd_type(::proto_info::CmdType value) {
  _internal_set_cmd_type(value);
  // @@protoc_insertion_point(field_set:proto_info.RequestMsg.cmd_type)
}

// bytes client_id = 2;
inline void RequestMsg::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& RequestMsg::client_id() const {
  // @@protoc_insertion_point(field_get:proto_info.RequestMsg.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestMsg::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_info.RequestMsg.client_id)
}
inline std::string* RequestMsg::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:proto_info.RequestMsg.client_id)
  return _s;
}
inline const std::string& RequestMsg::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void RequestMsg::_internal_set_client_id(const std::string& value) {
  
  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestMsg::_internal_mutable_client_id() {
  
  return _impl_.client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestMsg::release_client_id() {
  // @@protoc_insertion_point(field_release:proto_info.RequestMsg.client_id)
  return _impl_.client_id_.Release();
}
inline void RequestMsg::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  _impl_.client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_info.RequestMsg.client_id)
}

// bytes server_id = 3;
inline void RequestMsg::clear_server_id() {
  _impl_.server_id_.ClearToEmpty();
}
inline const std::string& RequestMsg::server_id() const {
  // @@protoc_insertion_point(field_get:proto_info.RequestMsg.server_id)
  return _internal_server_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestMsg::set_server_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_info.RequestMsg.server_id)
}
inline std::string* RequestMsg::mutable_server_id() {
  std::string* _s = _internal_mutable_server_id();
  // @@protoc_insertion_point(field_mutable:proto_info.RequestMsg.server_id)
  return _s;
}
inline const std::string& RequestMsg::_internal_server_id() const {
  return _impl_.server_id_.Get();
}
inline void RequestMsg::_internal_set_server_id(const std::string& value) {
  
  _impl_.server_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestMsg::_internal_mutable_server_id() {
  
  return _impl_.server_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestMsg::release_server_id() {
  // @@protoc_insertion_point(field_release:proto_info.RequestMsg.server_id)
  return _impl_.server_id_.Release();
}
inline void RequestMsg::set_allocated_server_id(std::string* server_id) {
  if (server_id != nullptr) {
    
  } else {
    
  }
  _impl_.server_id_.SetAllocated(server_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_id_.IsDefault()) {
    _impl_.server_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_info.RequestMsg.server_id)
}

// bytes sign = 4;
inline void RequestMsg::clear_sign() {
  _impl_.sign_.ClearToEmpty();
}
inline const std::string& RequestMsg::sign() const {
  // @@protoc_insertion_point(field_get:proto_info.RequestMsg.sign)
  return _internal_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestMsg::set_sign(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sign_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_info.RequestMsg.sign)
}
inline std::string* RequestMsg::mutable_sign() {
  std::string* _s = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:proto_info.RequestMsg.sign)
  return _s;
}
inline const std::string& RequestMsg::_internal_sign() const {
  return _impl_.sign_.Get();
}
inline void RequestMsg::_internal_set_sign(const std::string& value) {
  
  _impl_.sign_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestMsg::_internal_mutable_sign() {
  
  return _impl_.sign_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestMsg::release_sign() {
  // @@protoc_insertion_point(field_release:proto_info.RequestMsg.sign)
  return _impl_.sign_.Release();
}
inline void RequestMsg::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  _impl_.sign_.SetAllocated(sign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_info.RequestMsg.sign)
}

// bytes data = 5;
inline void RequestMsg::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& RequestMsg::data() const {
  // @@protoc_insertion_point(field_get:proto_info.RequestMsg.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestMsg::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_info.RequestMsg.data)
}
inline std::string* RequestMsg::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:proto_info.RequestMsg.data)
  return _s;
}
inline const std::string& RequestMsg::_internal_data() const {
  return _impl_.data_.Get();
}
inline void RequestMsg::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestMsg::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestMsg::release_data() {
  // @@protoc_insertion_point(field_release:proto_info.RequestMsg.data)
  return _impl_.data_.Release();
}
inline void RequestMsg::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_info.RequestMsg.data)
}

// -------------------------------------------------------------------

// RespondMsg

// bool status = 1;
inline void RespondMsg::clear_status() {
  _impl_.status_ = false;
}
inline bool RespondMsg::_internal_status() const {
  return _impl_.status_;
}
inline bool RespondMsg::status() const {
  // @@protoc_insertion_point(field_get:proto_info.RespondMsg.status)
  return _internal_status();
}
inline void RespondMsg::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void RespondMsg::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:proto_info.RespondMsg.status)
}

// int32 seckey_id = 2;
inline void RespondMsg::clear_seckey_id() {
  _impl_.seckey_id_ = 0;
}
inline int32_t RespondMsg::_internal_seckey_id() const {
  return _impl_.seckey_id_;
}
inline int32_t RespondMsg::seckey_id() const {
  // @@protoc_insertion_point(field_get:proto_info.RespondMsg.seckey_id)
  return _internal_seckey_id();
}
inline void RespondMsg::_internal_set_seckey_id(int32_t value) {
  
  _impl_.seckey_id_ = value;
}
inline void RespondMsg::set_seckey_id(int32_t value) {
  _internal_set_seckey_id(value);
  // @@protoc_insertion_point(field_set:proto_info.RespondMsg.seckey_id)
}

// bytes client_id = 3;
inline void RespondMsg::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& RespondMsg::client_id() const {
  // @@protoc_insertion_point(field_get:proto_info.RespondMsg.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RespondMsg::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_info.RespondMsg.client_id)
}
inline std::string* RespondMsg::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:proto_info.RespondMsg.client_id)
  return _s;
}
inline const std::string& RespondMsg::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void RespondMsg::_internal_set_client_id(const std::string& value) {
  
  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RespondMsg::_internal_mutable_client_id() {
  
  return _impl_.client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RespondMsg::release_client_id() {
  // @@protoc_insertion_point(field_release:proto_info.RespondMsg.client_id)
  return _impl_.client_id_.Release();
}
inline void RespondMsg::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  _impl_.client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_info.RespondMsg.client_id)
}

// bytes server_id = 4;
inline void RespondMsg::clear_server_id() {
  _impl_.server_id_.ClearToEmpty();
}
inline const std::string& RespondMsg::server_id() const {
  // @@protoc_insertion_point(field_get:proto_info.RespondMsg.server_id)
  return _internal_server_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RespondMsg::set_server_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_info.RespondMsg.server_id)
}
inline std::string* RespondMsg::mutable_server_id() {
  std::string* _s = _internal_mutable_server_id();
  // @@protoc_insertion_point(field_mutable:proto_info.RespondMsg.server_id)
  return _s;
}
inline const std::string& RespondMsg::_internal_server_id() const {
  return _impl_.server_id_.Get();
}
inline void RespondMsg::_internal_set_server_id(const std::string& value) {
  
  _impl_.server_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RespondMsg::_internal_mutable_server_id() {
  
  return _impl_.server_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RespondMsg::release_server_id() {
  // @@protoc_insertion_point(field_release:proto_info.RespondMsg.server_id)
  return _impl_.server_id_.Release();
}
inline void RespondMsg::set_allocated_server_id(std::string* server_id) {
  if (server_id != nullptr) {
    
  } else {
    
  }
  _impl_.server_id_.SetAllocated(server_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_id_.IsDefault()) {
    _impl_.server_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_info.RespondMsg.server_id)
}

// bytes data = 5;
inline void RespondMsg::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& RespondMsg::data() const {
  // @@protoc_insertion_point(field_get:proto_info.RespondMsg.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RespondMsg::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_info.RespondMsg.data)
}
inline std::string* RespondMsg::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:proto_info.RespondMsg.data)
  return _s;
}
inline const std::string& RespondMsg::_internal_data() const {
  return _impl_.data_.Get();
}
inline void RespondMsg::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* RespondMsg::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* RespondMsg::release_data() {
  // @@protoc_insertion_point(field_release:proto_info.RespondMsg.data)
  return _impl_.data_.Release();
}
inline void RespondMsg::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_info.RespondMsg.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_info

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto_info::CmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_info::CmdType>() {
  return ::proto_info::CmdType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message_2eproto
